// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xnat.proto

#ifndef PROTOBUF_INCLUDED_xnat_2eproto
#define PROTOBUF_INCLUDED_xnat_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_xnat_2eproto 

namespace protobuf_xnat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_xnat_2eproto
class Addr;
class AddrDefaultTypeInternal;
extern AddrDefaultTypeInternal _Addr_default_instance_;
class Bool;
class BoolDefaultTypeInternal;
extern BoolDefaultTypeInternal _Bool_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Iface;
class IfaceDefaultTypeInternal;
extern IfaceDefaultTypeInternal _Iface_default_instance_;
class Mode;
class ModeDefaultTypeInternal;
extern ModeDefaultTypeInternal _Mode_default_instance_;
class Vip;
class VipDefaultTypeInternal;
extern VipDefaultTypeInternal _Vip_default_instance_;
namespace google {
namespace protobuf {
template<> ::Addr* Arena::CreateMaybeMessage<::Addr>(Arena*);
template<> ::Bool* Arena::CreateMaybeMessage<::Bool>(Arena*);
template<> ::Empty* Arena::CreateMaybeMessage<::Empty>(Arena*);
template<> ::Iface* Arena::CreateMaybeMessage<::Iface>(Arena*);
template<> ::Mode* Arena::CreateMaybeMessage<::Mode>(Arena*);
template<> ::Vip* Arena::CreateMaybeMessage<::Vip>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Type {
  INGRESS = 0,
  EGRESS = 1,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Type_IsValid(int value);
const Type Type_MIN = INGRESS;
const Type Type_MAX = EGRESS;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_xnat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Mode) */ {
 public:
  Mode();
  virtual ~Mode();

  Mode(const Mode& from);

  inline Mode& operator=(const Mode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mode(Mode&& from) noexcept
    : Mode() {
    *this = ::std::move(from);
  }

  inline Mode& operator=(Mode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mode* internal_default_instance() {
    return reinterpret_cast<const Mode*>(
               &_Mode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Mode* other);
  friend void swap(Mode& a, Mode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mode* New() const final {
    return CreateMaybeMessage<Mode>(NULL);
  }

  Mode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mode& from);
  void MergeFrom(const Mode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  const ::std::string& mode() const;
  void set_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_mode(::std::string&& value);
  #endif
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  ::std::string* mutable_mode();
  ::std::string* release_mode();
  void set_allocated_mode(::std::string* mode);

  // @@protoc_insertion_point(class_scope:Mode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_xnat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Bool) */ {
 public:
  Bool();
  virtual ~Bool();

  Bool(const Bool& from);

  inline Bool& operator=(const Bool& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bool(Bool&& from) noexcept
    : Bool() {
    *this = ::std::move(from);
  }

  inline Bool& operator=(Bool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bool* internal_default_instance() {
    return reinterpret_cast<const Bool*>(
               &_Bool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Bool* other);
  friend void swap(Bool& a, Bool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bool* New() const final {
    return CreateMaybeMessage<Bool>(NULL);
  }

  Bool* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Bool>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Bool& from);
  void MergeFrom(const Bool& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Bool)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_xnat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Addr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Addr) */ {
 public:
  Addr();
  virtual ~Addr();

  Addr(const Addr& from);

  inline Addr& operator=(const Addr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Addr(Addr&& from) noexcept
    : Addr() {
    *this = ::std::move(from);
  }

  inline Addr& operator=(Addr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Addr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Addr* internal_default_instance() {
    return reinterpret_cast<const Addr*>(
               &_Addr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Addr* other);
  friend void swap(Addr& a, Addr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Addr* New() const final {
    return CreateMaybeMessage<Addr>(NULL);
  }

  Addr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Addr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Addr& from);
  void MergeFrom(const Addr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Addr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:Addr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_xnat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Iface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Iface) */ {
 public:
  Iface();
  virtual ~Iface();

  Iface(const Iface& from);

  inline Iface& operator=(const Iface& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Iface(Iface&& from) noexcept
    : Iface() {
    *this = ::std::move(from);
  }

  inline Iface& operator=(Iface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Iface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Iface* internal_default_instance() {
    return reinterpret_cast<const Iface*>(
               &_Iface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Iface* other);
  friend void swap(Iface& a, Iface& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Iface* New() const final {
    return CreateMaybeMessage<Iface>(NULL);
  }

  Iface* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Iface>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Iface& from);
  void MergeFrom(const Iface& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Iface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 vid = 2;
  void clear_vid();
  static const int kVidFieldNumber = 2;
  ::google::protobuf::uint32 vid() const;
  void set_vid(::google::protobuf::uint32 value);

  // .Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::Type type() const;
  void set_type(::Type value);

  // @@protoc_insertion_point(class_scope:Iface)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 vid_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_xnat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Vip) */ {
 public:
  Vip();
  virtual ~Vip();

  Vip(const Vip& from);

  inline Vip& operator=(const Vip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vip(Vip&& from) noexcept
    : Vip() {
    *this = ::std::move(from);
  }

  inline Vip& operator=(Vip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vip* internal_default_instance() {
    return reinterpret_cast<const Vip*>(
               &_Vip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Vip* other);
  friend void swap(Vip& a, Vip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vip* New() const final {
    return CreateMaybeMessage<Vip>(NULL);
  }

  Vip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vip& from);
  void MergeFrom(const Vip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Iface iface = 1;
  bool has_iface() const;
  void clear_iface();
  static const int kIfaceFieldNumber = 1;
  private:
  const ::Iface& _internal_iface() const;
  public:
  const ::Iface& iface() const;
  ::Iface* release_iface();
  ::Iface* mutable_iface();
  void set_allocated_iface(::Iface* iface);

  // .Addr addr = 2;
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  private:
  const ::Addr& _internal_addr() const;
  public:
  const ::Addr& addr() const;
  ::Addr* release_addr();
  ::Addr* mutable_addr();
  void set_allocated_addr(::Addr* addr);

  // .Type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::Type type() const;
  void set_type(::Type value);

  // @@protoc_insertion_point(class_scope:Vip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Iface* iface_;
  ::Addr* addr_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_xnat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Mode

// string mode = 1;
inline void Mode::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mode::mode() const {
  // @@protoc_insertion_point(field_get:Mode.mode)
  return mode_.GetNoArena();
}
inline void Mode::set_mode(const ::std::string& value) {
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Mode.mode)
}
#if LANG_CXX11
inline void Mode::set_mode(::std::string&& value) {
  
  mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Mode.mode)
}
#endif
inline void Mode::set_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Mode.mode)
}
inline void Mode::set_mode(const char* value, size_t size) {
  
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Mode.mode)
}
inline ::std::string* Mode::mutable_mode() {
  
  // @@protoc_insertion_point(field_mutable:Mode.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mode::release_mode() {
  // @@protoc_insertion_point(field_release:Mode.mode)
  
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mode::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    
  } else {
    
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:Mode.mode)
}

// -------------------------------------------------------------------

// Bool

// bool success = 1;
inline void Bool::clear_success() {
  success_ = false;
}
inline bool Bool::success() const {
  // @@protoc_insertion_point(field_get:Bool.success)
  return success_;
}
inline void Bool::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:Bool.success)
}

// -------------------------------------------------------------------

// Addr

// string addr = 1;
inline void Addr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Addr::addr() const {
  // @@protoc_insertion_point(field_get:Addr.addr)
  return addr_.GetNoArena();
}
inline void Addr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Addr.addr)
}
#if LANG_CXX11
inline void Addr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Addr.addr)
}
#endif
inline void Addr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Addr.addr)
}
inline void Addr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Addr.addr)
}
inline ::std::string* Addr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:Addr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Addr::release_addr() {
  // @@protoc_insertion_point(field_release:Addr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Addr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:Addr.addr)
}

// -------------------------------------------------------------------

// Iface

// string name = 1;
inline void Iface::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Iface::name() const {
  // @@protoc_insertion_point(field_get:Iface.name)
  return name_.GetNoArena();
}
inline void Iface::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Iface.name)
}
#if LANG_CXX11
inline void Iface::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Iface.name)
}
#endif
inline void Iface::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Iface.name)
}
inline void Iface::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Iface.name)
}
inline ::std::string* Iface::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Iface.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Iface::release_name() {
  // @@protoc_insertion_point(field_release:Iface.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Iface::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Iface.name)
}

// uint32 vid = 2;
inline void Iface::clear_vid() {
  vid_ = 0u;
}
inline ::google::protobuf::uint32 Iface::vid() const {
  // @@protoc_insertion_point(field_get:Iface.vid)
  return vid_;
}
inline void Iface::set_vid(::google::protobuf::uint32 value) {
  
  vid_ = value;
  // @@protoc_insertion_point(field_set:Iface.vid)
}

// .Type type = 3;
inline void Iface::clear_type() {
  type_ = 0;
}
inline ::Type Iface::type() const {
  // @@protoc_insertion_point(field_get:Iface.type)
  return static_cast< ::Type >(type_);
}
inline void Iface::set_type(::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Iface.type)
}

// -------------------------------------------------------------------

// Vip

// .Iface iface = 1;
inline bool Vip::has_iface() const {
  return this != internal_default_instance() && iface_ != NULL;
}
inline void Vip::clear_iface() {
  if (GetArenaNoVirtual() == NULL && iface_ != NULL) {
    delete iface_;
  }
  iface_ = NULL;
}
inline const ::Iface& Vip::_internal_iface() const {
  return *iface_;
}
inline const ::Iface& Vip::iface() const {
  const ::Iface* p = iface_;
  // @@protoc_insertion_point(field_get:Vip.iface)
  return p != NULL ? *p : *reinterpret_cast<const ::Iface*>(
      &::_Iface_default_instance_);
}
inline ::Iface* Vip::release_iface() {
  // @@protoc_insertion_point(field_release:Vip.iface)
  
  ::Iface* temp = iface_;
  iface_ = NULL;
  return temp;
}
inline ::Iface* Vip::mutable_iface() {
  
  if (iface_ == NULL) {
    auto* p = CreateMaybeMessage<::Iface>(GetArenaNoVirtual());
    iface_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Vip.iface)
  return iface_;
}
inline void Vip::set_allocated_iface(::Iface* iface) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete iface_;
  }
  if (iface) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      iface = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, iface, submessage_arena);
    }
    
  } else {
    
  }
  iface_ = iface;
  // @@protoc_insertion_point(field_set_allocated:Vip.iface)
}

// .Addr addr = 2;
inline bool Vip::has_addr() const {
  return this != internal_default_instance() && addr_ != NULL;
}
inline void Vip::clear_addr() {
  if (GetArenaNoVirtual() == NULL && addr_ != NULL) {
    delete addr_;
  }
  addr_ = NULL;
}
inline const ::Addr& Vip::_internal_addr() const {
  return *addr_;
}
inline const ::Addr& Vip::addr() const {
  const ::Addr* p = addr_;
  // @@protoc_insertion_point(field_get:Vip.addr)
  return p != NULL ? *p : *reinterpret_cast<const ::Addr*>(
      &::_Addr_default_instance_);
}
inline ::Addr* Vip::release_addr() {
  // @@protoc_insertion_point(field_release:Vip.addr)
  
  ::Addr* temp = addr_;
  addr_ = NULL;
  return temp;
}
inline ::Addr* Vip::mutable_addr() {
  
  if (addr_ == NULL) {
    auto* p = CreateMaybeMessage<::Addr>(GetArenaNoVirtual());
    addr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Vip.addr)
  return addr_;
}
inline void Vip::set_allocated_addr(::Addr* addr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete addr_;
  }
  if (addr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      addr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, addr, submessage_arena);
    }
    
  } else {
    
  }
  addr_ = addr;
  // @@protoc_insertion_point(field_set_allocated:Vip.addr)
}

// .Type type = 3;
inline void Vip::clear_type() {
  type_ = 0;
}
inline ::Type Vip::type() const {
  // @@protoc_insertion_point(field_get:Vip.type)
  return static_cast< ::Type >(type_);
}
inline void Vip::set_type(::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Vip.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Type>() {
  return ::Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_xnat_2eproto
